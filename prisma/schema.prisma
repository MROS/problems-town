// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id   String  @id @default(cuid())
    name String?

    email          String           @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    answers        Answer[]
    exercises      Exercise[]
    ActivityMember ActivityMember[]
}

model Activity {
    id             Int              @id @default(autoincrement())
    name           String
    description    String
    ActivityMember ActivityMember[]
}

// 用戶在活動中的角色，不同角色的權限不同
enum ActivityRole {
    OWNER // 最高權限
    BASE // 最低權限
}

model ActivityMember {
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    activity   Activity @relation(fields: [activityId], references: [id])
    activityId Int

    role ActivityRole

    @@id([userId, activityId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Book {
    id           Int       @id @default(autoincrement())
    name         String
    authors      String[]
    isTranslated Boolean
    originalName String?
    translators  String[]
    ISBN         String?   @unique
    pageNumber   Int?
    publishDate  DateTime? // 出版日期
    createDate   DateTime  @default(now()) // 本條目在在資料庫創建的時間

    chapters Chapter[]
}

// Chapter 可指涉章、節、小節......等等目錄樹下任意深度節點
model Chapter {
    id               String  @id @default(cuid())
    isRoot           Boolean // 若爲真，此爲虛擬的根章節，其 name 欄位應等同於書名
    indexInSameLevel Int
    name             String
    bookId           Int
    book             Book    @relation(fields: [bookId], references: [id])

    parentId             String?
    parent               Chapter?              @relation("parentChildren", fields: [parentId], references: [id], onDelete: Cascade) // 砍掉父節點，子節點也會跟着全被砍掉
    children             Chapter[]             @relation("parentChildren")
    exercises            Exercise[]
    builtInMaterialMetas BuiltInMaterialMeta[]
}

model BuiltInMaterialMeta {
    id        Int     @id @default(autoincrement())
    name      String
    count     Int
    chapterId String
    chapter   Chapter @relation(fields: [chapterId], references: [id])
}

enum ExerciseOrigin {
    BUILT_IN // 課本內建
    ORIGINAL // 鎮友原創
}

model Exercise {
    id           String         @id @default(cuid())
    origin       ExerciseOrigin @default(BUILT_IN)
    name         String
    chapterId    String
    chapter      Chapter        @relation(fields: [chapterId], references: [id])
    description  String?
    builtInOrder Int? // 若爲內建習題，該欄位代表習題編號，若爲原創習題，該欄位爲空
    category     String? // 當一章中有多種類型的習題，如分成計算題、證明題、申論題，用此欄位區分。
    createDate   DateTime       @default(now())

    authorId String?
    author   User?   @relation(fields: [authorId], references: [id])

    answers Answer[]
}

enum TextFormat {
    MARKDOWN
    IMAGE_URL // 圖片網址
}

model Answer {
    id         Int        @id @default(autoincrement())
    format     TextFormat @default(MARKDOWN)
    text       String // 答案內容
    createDate DateTime   @default(now())

    exerciseId String
    exercise   Exercise @relation(fields: [exerciseId], references: [id])
    authorId   String
    author     User     @relation(fields: [authorId], references: [id])
}
