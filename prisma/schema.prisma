// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id   String  @id @default(cuid())
    name String?

    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Book {
    id           String    @id @default(cuid())
    name         String
    ISBN         String    @unique
    authors      String[]
    isTranslated Boolean
    translators  String[]
    date         DateTime?

    chapters Chapter[]
}

// Chapter 可指涉章、節、小節......等等目錄樹下任意深度節點
model Chapter {
    id             String    @id @default(cuid())
    name           String
    exerciseNumber Int       @default(0)
    bookId         String
    book           Book      @relation(fields: [bookId], references: [id])
    parentId       String?
    parent         Chapter?  @relation("parent", fields: [parentId], references: [id], onDelete: Cascade) // 砍掉父節點，子節點也會跟着全被砍掉
    children       Chapter[] @relation("parent")
}
